# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
Parameters: 
  BucketName: 
    Type: "String"
    Description: "S3 Bucket containing build artifacts; should come from the CodeBuild step in Codepipeline"
  ObjectKey: 
    Type: String
    Description: "Specific reference to the build file within the bucket; should come from the CodeBuild step in Codepipeline"
  Version:
    Type: String
    Description: "Version number for the ImageBuilder Component; provided by AWS Lambda in previous preparation step."
  Architecture:
    Type: "String"
    Description: "Select between x86 and ARM instances"
  InstanceType:
    Type: "String"
    Description: "Instance Type for building the instances"
  InstanceProfile:
    Type: "String"
    Description: "Instance Profile required for EC2 during the build of the instance"

  # ResourceVersion:
  #   Type: String
  #   Default: '1.0.0'
  #   Description: The version to use for Image Builder resources
Resources:
  # This Component in the EC2 Image Builder setup contains the main logi
  # for installing the AMI. In this demo, the full script is inline. This
  # could be modified to read a script from an S3 bucket the same way that
  # the main build artifact is taken from an S3 bucket. Since this Cloud-
  # Formation template itself is also in Version Control, it can easily
  # be updated when needed for demo purposes.
  # DemoComponent:
  #   Type: AWS::ImageBuilder::Component
  #   Properties: 
  #     ChangeDescription: !Sub 
  #       - "Update ${ShortName} Image (${Architecture}) to version ${Version}"
  #       - ShortName: !Select [0, !Split ['-', !Ref AWS::StackName]]
  #     Data: !Sub |
  #       name: Spring Boot Application on Windows IIS Server
  #       description: Current version - ${Version}
  #       schemaVersion: 1.0
  #       phases:
  #         - name: build
  #           steps:
  #             - name: HelloWorldStep
  #               action: ExecuteBash
  #               inputs:
  #                 commands:
  #                   - cd /opt
  #                   - sudo su
  #                   - yum upgrade -y
  #                   - yum install -y java-17-amazon-corretto-headless
  #                   - useradd springboot
  #                   - result=`aws s3 cp s3://${BucketName}/${ObjectKey} /tmp`
  #                   - destination=${!result##* }
  #                   - unzip $destination && mv target springboot
  #                   - chown -R springboot:springboot springboot
  #                   - rm -rf $destination
  #                   - echo "[Unit]" > /etc/systemd/system/springboot.service
  #                   - echo "Description=Test Spring Boot Getting Started" >> /etc/systemd/system/springboot.service
  #                   - echo "After=syslog.target" >> /etc/systemd/system/springboot.service
  #                   - echo "" >> /etc/systemd/system/springboot.service
  #                   - echo "[Service]" >> /etc/systemd/system/springboot.service
  #                   - echo "User=springboot" >> /etc/systemd/system/springboot.service
  #                   - echo "WorkingDirectory=/opt/springboot" >> /etc/systemd/system/springboot.service
  #                   - echo "ExecStart=/usr/bin/java -jar /opt/springboot/gs-spring-boot-0.1.0.jar" >> /etc/systemd/system/springboot.service
  #                   - echo "SuccessExitStatus=143" >> /etc/systemd/system/springboot.service
  #                   - echo "" >> /etc/systemd/system/springboot.service
  #                   - echo "[Install]" >> /etc/systemd/system/springboot.service
  #                   - echo "WantedBy=multi-user.target" >> /etc/systemd/system/springboot.service
  #                   - systemctl daemon-reload
  #                   - systemctl enable springboot.service
  #         - name: validate
  #           steps:
  #             - name: HelloWorldStep
  #               action: ExecuteBash
  #               inputs:
  #                 commands:
  #                   - systemctl is-enabled --quiet springboot.service
  #         - name: test
  #           steps:
  #             - name: HelloWorldStep
  #               action: ExecuteBash
  #               inputs:
  #                 commands:
  #                   - systemctl is-active --quiet springboot.service
  #                   - curl --fail http://localhost:8080/
  #     Description: !Sub 
  #       - "${ShortName} Component"
  #       - ShortName: !Select [0, !Split ['-', !Ref AWS::StackName]]
  #     Name: !Sub "${AWS::StackName}-Component"
  #     Platform: Windows
  #     Version: !Sub ${Version}

  WindowsIISComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: WindowsIISComponent
      Version: !Ref Version
      Description: Install Windows IIS Server
      ChangeDescription: First version
      Platform: Windows
      Data: |
        name: InstallIISWebServer
        description: Install IIS Web Server
        schemaVersion: 1.0

        phases:
          - name: build
            steps:
              - name: InstallIIS
                action: ExecutePowerShell
                inputs:
                  commands: 
                    - |
                      Install-WindowsFeature -Name Web-Server -IncludeManagementTools

              - name: ConfigureIIS
                action: ExecutePowerShell
                inputs:
                  commands: 
                    - |
                      Import-Module WebAdministration
                      New-WebAppPool -Name MyAppPool
                      New-Website -Name MyAppSite -PhysicalPath C:\inetpub\wwwroot -ApplicationPool MyAppPool -Port 80 -HostHeader MyDomain.com

          - name: test
            steps:
              - name: TestIISInstallation
                action: ExecutePowerShell
                inputs:
                  commands: 
                    - |
                      Import-Module WebAdministration
                      $site = Get-Website -Name 'MyAppSite' -ErrorAction SilentlyContinue
                      if ($site -ne $null) {
                      Write-Output "IIS has been successfully installed."
                      } else {
                          Write-Error "IIS has not been installed."
                      }
  # Image is the ultimate outcome of the EC2 Image Builder process. Notice
  # the reference to this item in the Outputs. It comnbines the Recipe with
  # the Infrastructure Configuration.
  WindowsIISDemoImage:
    Type: AWS::ImageBuilder::Image
    Properties: 
      ImageRecipeArn: !GetAtt WindowsIISDemoImageRecipe.Arn
      InfrastructureConfigurationArn: !GetAtt WindowsIISDemoInfrastructureConfiguration.Arn
      EnhancedImageMetadataEnabled: false
      Tags:
        Application: 'WindowsIISDemoImageBuilder'
  # The recipe is a set of Components required to build an Image. In this case
  # we need only a single component as it contains all the logic in one.
  WindowsIISDemoImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties: 
      Components: 
        # - ComponentArn: !GetAtt DemoComponent.Arn
        - ComponentArn: !GetAtt WindowsIISComponent.Arn
        - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/update-windows/x.x.x'
        - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/aws-cli-version-2-windows/x.x.x'
        - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/powershell-windows/x.x.x'
        - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/windows-activation-test/x.x.x'
        - ComponentArn: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/reboot-test-windows/x.x.x'
      Tags:
        Purpose: WindowsIISImageBuilderSample
      # This becomes the AMI description
      Description: !Sub 
        - "${ShortName} Image (${Architecture}) version ${Version}"
        - ShortName: !Select [0, !Split ['-', !Ref AWS::StackName]]
      Name: !Sub 
        - "${ShortName}-Image"
        - ShortName: !Select [0, !Split ['-', !Ref AWS::StackName]]
      ParentImage: !Sub "arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/windows-server-2022-english-full-base-${Architecture}/x.x.x"
      Version: !Sub ${Version}
  # The infrastructure configuration specifies the machine type and role name.
  # For this purpose, a t3.nano or t3a.nano is sufficient and helps keep
  # cost low.
  WindowsIISDemoInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties: 
      InstanceProfileName: !Sub "${InstanceProfile}"
      InstanceTypes: 
        - !Sub "${InstanceType}"
      Name: !Sub "${AWS::StackName}-InfraConfig"

  WindowsIISDemoImageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Image Id for Window Server 2012 with IIS Server
      Name: /Test/Images/Windows_Server-2022-IIS
      Type: String
      Value:
        Fn::GetAtt: [WindowsIISDemoImage, ImageId]

  # WindowsIISDemoDistribution:
  #     Type: AWS::ImageBuilder::DistributionConfiguration
  #     Properties:
  #       Name: !Sub "${AWS::StackName}-WindowsDistro"
  #       Description: !Sub 'Deploys the ${AWS::StackName} AMI to all desired regions.'
  #       Distributions:
  #         - Region: !Ref 'AWS::Region'
  #           AmiDistributionConfiguration:
  #             Name: !Sub "${AWS::StackName}-{{ imagebuilder:buildDate }}"
  #             AmiTags:
  #               Name: !Sub "${AWS::StackName}"
  #       Tags:
  #         Purpose: WindowsIISImageBuilderSample
  
  # WindowsIISPipeline:
  #   Type: AWS::ImageBuilder::ImagePipeline
  #   Properties:
  #     Description: !Sub 'A pipeline to automate creation of the ${AWS::StackName} image'
  #     DistributionConfigurationArn: !Ref WindowsIISDemoDistribution
  #     ImageRecipeArn: !Ref WindowsIISDemoImageRecipe
  #     ImageTestsConfiguration:
  #       ImageTestsEnabled: true
  #       TimeoutMinutes: 60
  #     InfrastructureConfigurationArn: !Ref WindowsIISDemoInfrastructureConfiguration
  #     Name: !Sub "${AWS::StackName}-WindowsDistro"
  #     Schedule:
  #       PipelineExecutionStartCondition: EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
  #       ScheduleExpression: 'cron(0 9 * * ? *)'
  #     Status: ENABLED
  #     Tags:
  #       Purpose: WindowsIISImageBuilderSample
Outputs:
  WindowsIISDemoImageArn:
    Description: Reference to EC2 Image Builder Output Arn
    Value: !GetAtt WindowsIISDemoImage.Arn
  WindowsIISDemoImageId:
    Description: Reference to EC2 Image Builder Output ImageId
    Value: !GetAtt WindowsIISDemoImage.ImageId